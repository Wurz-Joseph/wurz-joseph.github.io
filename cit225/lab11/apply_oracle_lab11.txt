SQL> 
SQL> --STEP 1
SQL> 
SQL> MERGE INTO rental target
  2  USING (
  3  SELECT DISTINCT
  4        r.rental_id
  5  ,     c.contact_id
  6  ,     tu.check_out_date AS check_out_date
  7  ,     tu.return_date AS return_date
  8  ,     1 AS created_by
  9  ,     TRUNC(SYSDATE) AS creation_date
 10  ,     1 AS last_updated_by
 11  ,     TRUNC(SYSDATE) AS last_update_date
 12  FROM  member m INNER JOIN transaction_upload tu
 13  ON    m.account_number = tu.account_number INNER JOIN contact c
 14  ON    m.member_id = c.member_id
 15  LEFT JOIN rental r
 16  ON    c.contact_id = r.customer_id
 17  AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 18  AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 19  WHERE    c.first_name = tu.first_name
 20  AND   NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 21  AND   c.last_name = tu.last_name
 22  AND   tu.account_number = m.account_number
 23  ) source
 24  ON (target.rental_id = source.rental_id)
 25  WHEN MATCHED THEN
 26  UPDATE SET last_updated_by = source.last_updated_by
 27  ,          last_update_date = source.last_update_date
 28  WHEN NOT MATCHED THEN
 29  INSERT VALUES
 30  ( rental_s1.NEXTVAL
 31  , source.contact_id
 32  , source.check_out_date
 33  , source.return_date
 34  , source.created_by
 35  , source.creation_date
 36  , source.last_updated_by
 37  , source.last_update_date);

4,681 rows merged.

SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental after merge"
  2  FROM     rental;

Rental 
-------
  4,689

1 row selected. 

SQL> 
SQL> --STEP 2
SQL> 
SQL> MERGE INTO rental_item target
  2  USING (
  3  SELECT    ri.rental_item_id
  4   ,        r.rental_id
  5   ,        tu.item_id AS item_id
  6   ,        1 AS created_by
  7   ,        TRUNC(SYSDATE) AS creation_date
  8   ,        1 AS last_updated_by
  9   ,        TRUNC(SYSDATE) AS last_update_date
 10   ,        cl1.common_lookup_id AS rental_item_type
 11   ,        r.return_date - r.check_out_date AS rental_item_price
 12  FROM     member m INNER JOIN contact c
 13           ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 14           ON       c.first_name = tu.first_name
 15           AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 16           AND      c.last_name = tu.last_name
 17           AND      tu.account_number = m.account_number
 18           LEFT JOIN rental r
 19           ON    c.contact_id = r.customer_id
 20           AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 21           AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 22           INNER JOIN common_lookup cl1
 23           ON     cl1.common_lookup_table = 'RENTAL_ITEM'
 24           AND    cl1.common_lookup_column = 'RENTAL_ITEM_TYPE'
 25           AND    cl1.common_lookup_type = tu.rental_item_type
 26           LEFT JOIN rental_item ri
 27           ON r.rental_id = ri.rental_id
 28  ) source
 29  ON (target.rental_item_id = source.rental_item_id)
 30  WHEN MATCHED THEN
 31  UPDATE SET last_updated_by = source.last_updated_by
 32  ,          last_update_date = source.last_update_date
 33  WHEN NOT MATCHED THEN
 34  INSERT VALUES
 35  ( rental_item_s1.nextval
 36  , source.rental_id
 37  , source.item_id
 38  , source.created_by
 39  , source.creation_date
 40  , source.last_updated_by
 41  , source.last_update_date
 42  , source.rental_item_type
 43  , source.rental_item_price);

38,720 rows merged.

SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental Item after merge"
  2  FROM     rental_item;

Rental 
-------
 11,533

1 row selected. 

SQL> 
SQL> --STEP 3
SQL> 
SQL> MERGE INTO transaction target
  2  USING (
  3  SELECT   t.transaction_id
  4  ,        tu.payment_account_number AS transaction_account
  5  ,        cl1.common_lookup_id AS transaction_type
  6  ,        TRUNC(tu.transaction_date) AS transaction_date
  7  ,       (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
  8  ,        r.rental_id
  9  ,        cl2.common_lookup_id AS payment_method_type
 10  ,        m.credit_card_number AS payment_account_number
 11  ,        1 AS created_by
 12  ,        TRUNC(SYSDATE) AS creation_date
 13  ,        1 AS last_updated_by
 14  ,        TRUNC(SYSDATE) AS last_update_date
 15  FROM     member m INNER JOIN contact c
 16           ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 17           ON       c.first_name = tu.first_name
 18           AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 19           AND      c.last_name = tu.last_name
 20           AND      tu.account_number = m.account_number
 21           LEFT JOIN rental r
 22           ON    c.contact_id = r.customer_id
 23           AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 24           AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 25           INNER JOIN common_lookup cl1
 26           ON     cl1.common_lookup_table = 'TRANSACTION'
 27           AND    cl1.common_lookup_column = 'TRANSACTION_TYPE'
 28           AND    cl1.common_lookup_type = tu.transaction_type
 29             INNER JOIN common_lookup cl2
 30           ON     cl2.common_lookup_table = 'TRANSACTION'
 31           AND    cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
 32           AND    cl2.common_lookup_type = tu.payment_method_type
 33           LEFT JOIN transaction t
 34           ON t.transaction_account = tu.payment_account_number
 35           AND t.rental_id = r.rental_id
 36           AND t.transaction_type = cl1.common_lookup_id
 37           AND t.transaction_date = tu.transaction_date
 38           AND t.payment_method_type = cl2.common_lookup_id
 39           AND t.payment_account_number = m.credit_card_number
 40           GROUP BY t.transaction_id
 41  ,        tu.payment_account_number
 42  ,        cl1.common_lookup_id
 43  ,        tu.transaction_date
 44  ,        r.rental_id
 45  ,        cl2.common_lookup_id
 46  ,        m.credit_card_number
 47  ,        1
 48  ,        TRUNC(SYSDATE)
 49  ,        1
 50  ,        TRUNC(SYSDATE)
 51  
 52  ) source
 53  ON (target.transaction_id = source.transaction_id)
 54  WHEN MATCHED THEN
 55  UPDATE SET last_updated_by = source.last_updated_by
 56  ,          last_update_date = source.last_update_date
 57  WHEN NOT MATCHED THEN
 58  INSERT VALUES
 59  ( transaction_s1.nextval
 60  , source.transaction_account
 61  , source.transaction_type
 62  , source.transaction_date
 63  , source.transaction_amount
 64  , source.rental_id
 65  , source.payment_method_type
 66  , source.payment_account_number
 67  , source.created_by
 68  , source.creation_date
 69  , source.last_updated_by
 70  , source.last_update_date);

4,681 rows merged.

SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Transaction after merge"
  2  FROM     transaction;

Transac
-------
  4,681

1 row selected. 

SQL> 
SQL> --STEP 4
SQL> 
SQL> --a.
SQL> 
SQL> -- Create a procedure to wrap the transaction.
SQL> CREATE OR REPLACE PROCEDURE upload_transaction IS 
  2  BEGIN
  3    -- Set save point for an all or nothing transaction.
  4    SAVEPOINT starting_point;
  5  
  6    -- Merge into RENTAL table.
  7    MERGE INTO rental target
  8  USING (
  9  SELECT DISTINCT
 10        r.rental_id
 11  ,     c.contact_id
 12  ,     tu.check_out_date AS check_out_date
 13  ,     tu.return_date AS return_date
 14  ,     1 AS created_by
 15  ,     TRUNC(SYSDATE) AS creation_date
 16  ,     1 AS last_updated_by
 17  ,     TRUNC(SYSDATE) AS last_update_date
 18  FROM  member m INNER JOIN transaction_upload tu
 19  ON    m.account_number = tu.account_number INNER JOIN contact c
 20  ON    m.member_id = c.member_id
 21  LEFT JOIN rental r
 22  ON    c.contact_id = r.customer_id
 23  AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 24  AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 25  WHERE    c.first_name = tu.first_name
 26  AND   NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 27  AND   c.last_name = tu.last_name
 28  AND   tu.account_number = m.account_number
 29  ) source
 30  ON (target.rental_id = source.rental_id)
 31  WHEN MATCHED THEN
 32  UPDATE SET last_updated_by = source.last_updated_by
 33  ,          last_update_date = source.last_update_date
 34  WHEN NOT MATCHED THEN
 35  INSERT VALUES
 36  ( rental_s1.NEXTVAL
 37  , source.contact_id
 38  , source.check_out_date
 39  , source.return_date
 40  , source.created_by
 41  , source.creation_date
 42  , source.last_updated_by
 43  , source.last_update_date);
 44  
 45    -- Merge into RENTAL_ITEM table.
 46    MERGE INTO rental_item target
 47  USING (
 48  SELECT    ri.rental_item_id
 49   ,        r.rental_id
 50   ,        tu.item_id AS item_id
 51   ,        1 AS created_by
 52   ,        TRUNC(SYSDATE) AS creation_date
 53   ,        1 AS last_updated_by
 54   ,        TRUNC(SYSDATE) AS last_update_date
 55   ,        cl1.common_lookup_id AS rental_item_type
 56   ,        r.return_date - r.check_out_date AS rental_item_price
 57  FROM     member m INNER JOIN contact c
 58           ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 59           ON       c.first_name = tu.first_name
 60           AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 61           AND      c.last_name = tu.last_name
 62           AND      tu.account_number = m.account_number
 63           LEFT JOIN rental r
 64           ON    c.contact_id = r.customer_id
 65           AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 66           AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 67           INNER JOIN common_lookup cl1
 68           ON     cl1.common_lookup_table = 'RENTAL_ITEM'
 69           AND    cl1.common_lookup_column = 'RENTAL_ITEM_TYPE'
 70           AND    cl1.common_lookup_type = tu.rental_item_type
 71           LEFT JOIN rental_item ri
 72           ON r.rental_id = ri.rental_id
 73  ) source
 74  ON (target.rental_item_id = source.rental_item_id)
 75  WHEN MATCHED THEN
 76  UPDATE SET last_updated_by = source.last_updated_by
 77  ,          last_update_date = source.last_update_date
 78  WHEN NOT MATCHED THEN
 79  INSERT VALUES
 80  ( rental_item_s1.nextval
 81  , source.rental_id
 82  , source.item_id
 83  , source.created_by
 84  , source.creation_date
 85  , source.last_updated_by
 86  , source.last_update_date
 87  , source.rental_item_type
 88  , source.rental_item_price);
 89  
 90    -- Merge into TRANSACTION table.
 91    MERGE INTO transaction target
 92  USING (
 93  SELECT   t.transaction_id
 94  ,        tu.payment_account_number AS transaction_account
 95  ,        cl1.common_lookup_id AS transaction_type
 96  ,        TRUNC(tu.transaction_date) AS transaction_date
 97  ,       (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
 98  ,        r.rental_id
 99  ,        cl2.common_lookup_id AS payment_method_type
100  ,        m.credit_card_number AS payment_account_number
101  ,        1 AS created_by
102  ,        TRUNC(SYSDATE) AS creation_date
103  ,        1 AS last_updated_by
104  ,        TRUNC(SYSDATE) AS last_update_date
105  FROM     member m INNER JOIN contact c
106           ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
107           ON       c.first_name = tu.first_name
108           AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
109           AND      c.last_name = tu.last_name
110           AND      tu.account_number = m.account_number
111           LEFT JOIN rental r
112           ON    c.contact_id = r.customer_id
113           AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
114           AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
115           INNER JOIN common_lookup cl1
116           ON     cl1.common_lookup_table = 'TRANSACTION'
117           AND    cl1.common_lookup_column = 'TRANSACTION_TYPE'
118           AND    cl1.common_lookup_type = tu.transaction_type
119             INNER JOIN common_lookup cl2
120           ON     cl2.common_lookup_table = 'TRANSACTION'
121           AND    cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
122           AND    cl2.common_lookup_type = tu.payment_method_type
123           LEFT JOIN transaction t
124           ON t.transaction_account = tu.payment_account_number
125           AND t.rental_id = r.rental_id
126           AND t.transaction_type = cl1.common_lookup_id
127           AND t.transaction_date = tu.transaction_date
128           AND t.payment_method_type = cl2.common_lookup_id
129           AND t.payment_account_number = m.credit_card_number
130           GROUP BY t.transaction_id
131  ,        tu.payment_account_number
132  ,        cl1.common_lookup_id
133  ,        tu.transaction_date
134  ,        r.rental_id
135  ,        cl2.common_lookup_id
136  ,        m.credit_card_number
137  ,        1
138  ,        TRUNC(SYSDATE)
139  ,        1
140  ,        TRUNC(SYSDATE)
141  
142  ) source
143  ON (target.transaction_id = source.transaction_id)
144  WHEN MATCHED THEN
145  UPDATE SET last_updated_by = source.last_updated_by
146  ,          last_update_date = source.last_update_date
147  WHEN NOT MATCHED THEN
148  INSERT VALUES
149  ( transaction_s1.nextval
150  , source.transaction_account
151  , source.transaction_type
152  , source.transaction_date
153  , source.transaction_amount
154  , source.rental_id
155  , source.payment_method_type
156  , source.payment_account_number
157  , source.created_by
158  , source.creation_date
159  , source.last_updated_by
160  , source.last_update_date);
161  
162    -- Save the changes.
163    COMMIT;
164  
165  EXCEPTION
166    WHEN OTHERS THEN
167      ROLLBACK TO starting_point;
168      RETURN;
169  END;
170  /

Procedure UPLOAD_TRANSACTION compiled

SQL> 
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> 
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2  ,        il2.rental_item_count
  3  ,        il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5          (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6          (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

                        Rental                  
      Rental              Item       Transaction
       Count             Count             Count
------------ ----------------- -----------------
  4,689       11,533             4,681          

1 row selected. 

SQL> 
SQL> 
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> 
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2  ,        il2.rental_item_count
  3  ,        il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5          (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6          (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

                        Rental                  
      Rental              Item       Transaction
       Count             Count             Count
------------ ----------------- -----------------
  4,689       11,533             4,681          

1 row selected. 

SQL> 
SQL> SELECT
  2    il.month AS "MONTH YEAR"
  3  , il.base AS "BASE REVENUE"
  4  , il.plus10 AS "10 PLUS REVENUE"
  5  , il.plus20 AS "20 PLUS REVENUE"
  6  , il.only10 AS "10 PLUS DIFFERENCE"
  7  , Il.only20 AS "20 PLUS DIFFERENCE"
  8  FROM
  9       (SELECT 
 10        CONCAT(TO_CHAR(t.transaction_date,'MON'),CONCAT(' ',EXTRACT(YEAR FROM t.transaction_date))) AS MONTH
 11      , EXTRACT (MONTH FROM t.transaction_date) AS sortkey
 12      , TO_CHAR(SUM(t.transaction_amount),'$9,999,999.00') AS base
 13      , TO_CHAR(SUM(t.transaction_amount) * 1.1,'$9,999,999.00') AS plus10
 14      , TO_CHAR(SUM(t.transaction_amount) * 1.2,'$9,999,999.00') AS plus20
 15      , TO_CHAR(SUM(t.transaction_amount) * 0.1,'$9,999,999.00') AS only10
 16      , TO_CHAR(SUM(t.transaction_amount) * 0.2,'$9,999,999.00') AS only20
 17      FROM transaction t
 18      WHERE EXTRACT(YEAR FROM t.transaction_date) = 2009
 19      GROUP BY CONCAT(TO_CHAR(t.transaction_date,'MON'),CONCAT(' ',EXTRACT(YEAR FROM t.transaction_date))), EXTRACT (MONTH FROM t.transaction_date)) il
 20      ORDER BY il.sortkey;

MONTH YEAR                                            BASE REVENUE   10 PLUS REVENU 20 PLUS REVENU 10 PLUS DIFFER 20 PLUS DIFFER
----------------------------------------------------- -------------- -------------- -------------- -------------- --------------
JAN 2009                                                   $2,520.00      $2,772.00      $3,024.00        $252.00        $504.00
FEB 2009                                                   $4,029.00      $4,431.90      $4,834.80        $402.90        $805.80
MAR 2009                                                   $5,067.00      $5,573.70      $6,080.40        $506.70      $1,013.40
APR 2009                                                   $4,653.00      $5,118.30      $5,583.60        $465.30        $930.60
MAY 2009                                                   $2,091.00      $2,300.10      $2,509.20        $209.10        $418.20
JUN 2009                                                   $1,140.00      $1,254.00      $1,368.00        $114.00        $228.00
JUL 2009                                                   $2,268.00      $2,494.80      $2,721.60        $226.80        $453.60
AUG 2009                                                   $2,115.00      $2,326.50      $2,538.00        $211.50        $423.00
SEP 2009                                                   $2,073.00      $2,280.30      $2,487.60        $207.30        $414.60
OCT 2009                                                   $3,090.00      $3,399.00      $3,708.00        $309.00        $618.00
NOV 2009                                                   $2,949.00      $3,243.90      $3,538.80        $294.90        $589.80
DEC 2009                                                   $2,208.00      $2,428.80      $2,649.60        $220.80        $441.60

12 rows selected. 

SQL> 
SQL> 
SQL> 
SQL> SPOOL OFF
